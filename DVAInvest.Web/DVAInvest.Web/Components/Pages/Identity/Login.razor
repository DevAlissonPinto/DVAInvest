@page "/login"
@using DVAInvest.Web.Models
@using DVAInvest.Web.Security

@layout EmptyLayout

@rendermode InteractiveServer

@inject IHttpClientFactory httpClientFactory
@* @inject HttpClient httpClient *@
@inject NavigationManager navManager

<PageTitle>DVA Invest - Login</PageTitle>

<div class="container">
    
    <section class="section register min-vh-100 d-flex flex-column align-items-center justify-content-center py-4">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-4 col-md-6 d-flex flex-column align-items-center justify-content-center">

                    <div class="d-flex justify-content-center py-4">
                        <a href="index.html" class="logo d-flex align-items-center w-auto">
                            <img src="assets/img/logo.svg" alt="">
                        </a>
                    </div><!-- End Logo -->

                    <div class="card mb-3">

                        <div class="card-body">

                            @if (!string.IsNullOrEmpty(Msg))
                            {
                                <div class="pt-4 pb-2">
                                    <p class="text-center small">@Msg</p>
                                </div>
                            }

                            <div class="pt-4 pb-2">
                                <h5 class="card-title text-center pb-0 fs-4">Login </h5>
                                <p class="text-center small">Informe o e-mail e a senha</p>
                            </div>

                            <EditForm Model="@InputModel" class="row g-3" OnValidSubmit="OnValidSubmitAsync">
                                <DataAnnotationsValidator />

                                <div class="col-12">
                                    <label for="yourUsername" class="form-label">Email</label>
                                    <InputText @bind-Value="InputModel.Email" type="text" name="username" class="form-control" id="yourUsername" required />
                                    <ValidationMessage For="@(() => InputModel.Email)" />
                                </div>

                                <div class="col-12">
                                    <label for="yourPassword" class="form-label">Password</label>
                                    <InputText @bind-Value="InputModel.Password" type="password" name="password" class="form-control" id="yourPassword" required />
                                    <ValidationMessage For="@(() => InputModel.Password)" />
                                </div>

                                @* <div class="col-12">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="remember" value="true" id="rememberMe">
                                        <label class="form-check-label" for="rememberMe">Remember me</label>
                                    </div>
                                </div> *@
                                <div class="col-12">
                                    <button class="btn btn-primary w-100" type="submit">Login</button>
                                </div>
                                <div class="col-12">
                                    <p class="small mb-0">Não tem uma conta? <a href="/registrar">Criar uma conta</a></p>
                                </div>
                            </EditForm>

                        </div>
                    </div>



                </div>
            </div>
        </div>
    </section>

</div>

@code {
    public UserLoginViewModel InputModel { get; set; } = new();
    public string Msg { get; set; } = string.Empty;

    [Inject]
    public ICookieAuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    public async Task OnValidSubmitAsync()
    {
        HttpClient _client = httpClientFactory.CreateClient("DVAInvest");
        Msg = "";
        // httpClient.BaseAddress = new Uri("https://localhost:7005");
        var result = await _client.PostAsJsonAsync("v1/identity/login?useCookies=true", InputModel);

        if(result.IsSuccessStatusCode)
        {
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            AuthenticationStateProvider.NotifyAuthenticationStateChanged();
            navManager.NavigateTo("/");
        }
        else
        {
            Msg = "Usuário ou senha inválido";
        }
    }
}
